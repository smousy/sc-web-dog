import { ScAddr } from "./ScAddr";
import { ScConstruction } from "./ScConstruction";
import { ScEvent } from "./ScEvent";
import { ScEventParams } from "./ScEventParams";
import { ScLinkContent } from "./ScLinkContent";
import { ScTemplate } from "./ScTemplate";
import { ScTemplateResult } from "./ScTemplateResult";
import { ScType } from "./ScType";
import { ScError, TAction } from "./types";
export interface Response<T = any> {
    id: number;
    status: boolean;
    event: boolean;
    payload: T;
    errors: ScError;
}
export interface Request<T = any> {
    id: number;
    type: TAction;
    payload: T;
}
interface KeynodeParam<ParamId extends string = string> {
    id: ParamId;
    type: ScType;
}
declare type SocketEvent = "close" | "error" | "open";
export declare class ScClient {
    private _eventID;
    private _messageQueue;
    private _socket;
    private _callbacks;
    private _events;
    constructor(arg: string | WebSocket);
    addEventListener(evt: SocketEvent, cb: () => void): void;
    removeEventListener(evt: SocketEvent, cb: () => void): void;
    private sendMessagesFromQueue;
    private onMessage;
    private sendMessage;
    private resolveOrReject;
    checkElements(addrs: ScAddr[]): Promise<ScType[]>;
    createElements(construction: ScConstruction): Promise<ScAddr[]>;
    createElementsBySCs(scsText: string[]): Promise<boolean[]>;
    deleteElements(addrs: ScAddr[]): Promise<boolean>;
    setLinkContents(contents: ScLinkContent[]): Promise<boolean[]>;
    getLinkContents(addrs: ScAddr[]): Promise<ScLinkContent[]>;
    getLinksByContents(contents: string[]): Promise<ScAddr[][]>;
    getLinksByContentSubstrings(contents: string[]): Promise<ScAddr[][]>;
    getLinksContentsByContentSubstrings(contents: string[]): Promise<string[][]>;
    resolveKeynodes<ParamId extends string>(params: ReadonlyArray<KeynodeParam<ParamId>>): Promise<Record<ParamId, ScAddr>>;
    private processTripleItem;
    private processTemplate;
    private processTemplateParams;
    templateSearch(template: ScTemplate | ScAddr | string, params?: Record<string, ScAddr | string>): Promise<ScTemplateResult[]>;
    templateGenerate(template: ScTemplate | ScAddr | string, params?: Record<string, ScAddr | string>): Promise<ScTemplateResult | null>;
    eventsCreate(eventOrEvents: ScEventParams[] | ScEventParams): Promise<ScEvent[]>;
    eventsDestroy(eventIdOrIds: number[] | number): Promise<void>;
}
export {};
